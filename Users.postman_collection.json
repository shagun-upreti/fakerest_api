{
	"info": {
		"_postman_id": "dd6e1a3c-cb88-46d2-a66f-9bb365ff46b3",
		"name": "Users",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34179544"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function(){\r",
							"    let jsonData =pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Each user has an ID and Name\",function(){\r",
							"    let jsonData =pm.response.json();\r",
							"    jsonData.forEach(user => {\r",
							"        pm.expect(user).to.have.property(\"id\");\r",
							"        pm.expect(user).to.have.property(\"name\");\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/Users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let randomId = Math.floor(Math.random() * 1000);\r",
							"pm.environment.set(\"userId\", randomId);\r",
							"\r",
							"let randomUserName = \"User\" + randomId;\r",
							"pm.environment.set(\"userName\", String(randomUserName));\r",
							"\r",
							"let chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r",
							"let randomPassword = Array.from({length:8}, () => chars[Math.floor(Math.random() * chars.length)]).join('');\r",
							"pm.environment.set(\"password\", randomPassword);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains created user\", function(){\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\",pm.environment.get(\"userId\"));\r",
							"    pm.expect(jsonData).to.have.property(\"userName\", pm.environment.get(\"userName\"));\r",
							"    pm.expect(jsonData).to.have.property(\"password\", pm.environment.get(\"password\"));\r",
							"});\r",
							"\r",
							"pm.environment.set(\"CreatedUserId\", pm.response.json().id);\r",
							"var template = `\r",
							"<style type=\"text/css\">\r",
							"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
							"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
							"    .tftable tr {background-color:#ffffff;}\r",
							"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
							"    .tftable tr:hover {background-color:#e0ffff;}\r",
							"</style>\r",
							"\r",
							"<table class=\"tftable\" border=\"1\">\r",
							"    <tr>\r",
							"        <th>ID</th>\r",
							"        <th>User Name</th>\r",
							"        <th>Password</th>\r",
							"    </tr>\r",
							"    <tr>\r",
							"        <td>{{response.id}}</td>\r",
							"        <td>{{response.userName}}</td>\r",
							"        <td>{{response.password}}</td>\r",
							"    </tr>\r",
							"</table>\r",
							"`;\r",
							"\r",
							"function constructVisualizerPayload() {\r",
							"    return { response: pm.response.json() }\r",
							"}\r",
							"\r",
							"pm.visualizer.set(template, constructVisualizerPayload());"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{userId}},\r\n  \"userName\": \"{{userName}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/Users",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.expect(pm.environment.get(\"CreatedUserId\")).to.not.be.undefined;"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function() {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct user\", function(){\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"CreatedUserId\"));\r",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"userName\"));\r",
							"    pm.expect(jsonData.password).to.eql(pm.environment.get(\"password\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/Users/{{CreatedUserId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Users",
						"{{CreatedUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"updatedUserName\", \"updatedUser\"+ pm.environment.get(\"CreatedUserId\"));\r",
							"pm.environment.set(\"updatedPassword\", \"updatedPass\"+pm.environment.get(\"CreatedUserId\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User details updated successfully\", function(){\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.userName).to.eql(pm.environment.get(\"updatedUserName\"));\r",
							"    pm.expect(jsonData.password).to.eql(pm.environment.get(\"updatedPassword\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": {{CreatedUserId}},\r\n  \"userName\": \"{{updatedUserName}}\",\r\n  \"password\": \"{{updatedPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api/v1/Users/{{CreatedUserId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Users",
						"{{CreatedUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body should be empty\", function(){\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/v1/Users/{{CreatedUserId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"v1",
						"Users",
						"{{CreatedUserId}}"
					]
				}
			},
			"response": []
		}
	]
}